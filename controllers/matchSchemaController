var _ = require('underscore');
var async = require('async');
var crypto = require('crypto');
var nodemailer = require('nodemailer');
var passport = require('passport');
var MatchSchema = require('../models/MatchSchema');
var secrets = require('../config/secrets');
var ObjectId = require('mongoose').Types.ObjectId;



exports.save = function(req, res){
    var objId = new ObjectId(req.params.user_id);
    console.log(objId);

    MatchSchema.findOne({user: objId}, function(err, schemaToDelete){
        if(schemaToDelete) schemaToDelete.remove();
        var schema = new MatchSchema({
            user: req.user.id,
            groupPhase: req.body.groupsMatches,
            secondStageMatches: req.body.secondStageMatches
        });
        schema.markModified('groupPhase');
        schema.markModified('secondStageMatches');
        schema.save(function(err, schema){
            if(err) res.status(404).send({error:"Error while Saving quiniela"});
            return res.send(schema);
        })
    });


}


exports.userMatchSchema = function(req, res){
    var objId = new ObjectId(req.params.user_id);
    MatchSchema.findOne({user: objId}, function(err, schema){
        if(err) res.status(404).send("Fallo");
        return res.send(schema);
    });
}


exports.calculateRankingGroupPhase = function(req, res){
  if(!req.user || !req.user.admin) return res.send("You're not an admin")

  async.waterfall([
    function(callback){ //LOAD REAL RESULTS
      MatchSchema.findOne({user: req.user.id}, function(err, adminSchema){
        if(err) return res.send("Could't find you");
        callback(null, adminSchema);
      })
    },
    function(adminSchema, callback){ //LOAD USERS SCHEMAS
      MatchSchema.find({user: {$ne: req.user.id}})
        .populate('user')
        .exec(function(err, userSchemas){
          callback(null, adminSchema, userSchemas);
        }
      )
    },
    function(adminSchema, userSchemas, callback){
      _.each(userSchemas, function(userSchema){
        var points = calculatePoints(adminSchema, userSchema, false);
        userSchema.user.points = points;
        userSchema.user.save(function(err){if(err) callback(err, null)});

      })
      res.send("Rankings calculates successfully");

    }
  ], function (err, result) {
    if(err) res.send(err);
  });
}


exports.calculateRankingSecondPhase = function(req,res){
  if(!req.user || !req.user.admin) return res.send("You're not an admin")

  async.waterfall([
      function(callback){ //LOAD REAL RESULTS
        MatchSchema.findOne({user: req.user.id}, function(err, adminSchema){
          if(err) return res.send("Could't find you");
          callback(null, adminSchema);
        })
      },
      function(adminSchema, callback){ //LOAD USERS SCHEMAS
        MatchSchema.find({user: {$ne: req.user.id}})
          .populate('user')
          .exec(function(err, userSchemas){
            callback(null, adminSchema, userSchemas);
          }
        )
      },
      function(adminSchema, userSchemas, callback){
        _.each(userSchemas, function(userSchema){
          var points = calculatePoints(adminSchema, userSchema, true);
          userSchema.user.points = points;
          userSchema.user.save(function(err){if(err) callback(err, null)});

        })
        res.send("Rankings calculates successfully");

      }
  ], function (err, result) {
     if(err) res.send(err);
     res.send("Rankings calculates successfully" + result);
  });
}

function calculatePoints(adminSchema, userSchema, calculateSecondStage){
  var points = 0;
  var SAME_SCORE = 5;
  var CORRECT_WINNER_OR_DRAW = 3;
  var COUNTRY_IN_PHASE = 1;
  var COUNTRY_IN_CORRECT_POSITION = 2;
  var CORRECT_CHAMPION = 10;

  var adminGroupPhase = adminSchema.groupPhase;
  var userGroupPhase = userSchema.groupPhase;

  var adminSecondPhase = adminSchema.secondStageMatches;
  var userSecondPhase = userSchema.secondStageMatches;

  function correctWinOrDraw(realMatch, userMatch){
    if( (realMatch[0].score > realMatch[1].score) && (userMatch[0].score > userMatch[1].score) ) return true;
    else if( (realMatch[0].score < realMatch[1].score) && (userMatch[0].score < userMatch[1].score) ) return true;
    else if( (realMatch[0].score === realMatch[1].score) && (userMatch[0].score === userMatch[1].score) ) return true;
    else return false;
  }

  //Points for group Phase
  _.each(adminGroupPhase, function(matches, group){
    _.each(matches.matches, function(match, index){

      if(match[0].score !== null){ //Checking for admin on null
        if( (match[0].score === userGroupPhase[group].matches[index][0].score) && (match[1].score === userGroupPhase[group].matches[index][1].score) ){
          points += SAME_SCORE;
        }else if( correctWinOrDraw(match, userGroupPhase[group].matches[index]) ){
          points += CORRECT_WINNER_OR_DRAW;
        }
      }

    })
  });

  if(!calculateSecondStage) return points; //Return only points for first phase

  function correctCountriesInPhase(realPhaseCountries, userPhaseCountries){

    var correctCountries = _.intersection(realPhaseCountries, userPhaseCountries);
    console.log("Correct Countries", correctCountries);
    points += (correctCountries.length * COUNTRY_IN_PHASE);
  }


  function correctWinOnSecondStage(realMatch, userMatch){

    if(realMatch[0].score === null || realMatch[1].score === null) return false;  //Checking for admin on null

    if( (realMatch[0].score > realMatch[1].score) && (userMatch[0].score > userMatch[1].score) ) return true;
    else if( (realMatch[0].score < realMatch[1].score) && (userMatch[0].score < userMatch[1].score) ) return true;
    else if( (realMatch[0].score === realMatch[1].score) && (userMatch[0].score === userMatch[1].score) ){
      if(realMatch[0].victorByPenalties && userMatch[0].victorByPenalties) return true;
      if(realMatch[1].victorByPenalties && userMatch[1].victorByPenalties) return true;
    }
    return false;
  }


  //Points for second Phase
  _.each(adminSecondPhase, function(abcObject, phase){

    var realPhaseCountries = _.chain(abcObject).values().flatten().pluck("country").value();
    var userPhaseCountries = _.chain(userSecondPhase[phase]).values().flatten().pluck("country").value();
    correctCountriesInPhase(realPhaseCountries, userPhaseCountries); //How many countries are correct in the phase

    _.each(abcObject, function(realMatches, abcCode){

      var userMatches = userSecondPhase[phase][abcCode];
      //correctCountriesInPhase(realMatches, userMatches); //How many countries are correct in the phase
      if( (realMatches[0].country === userMatches[0].country) && (realMatches[1].country === userMatches[1].country) ){ //Correct countries position
        if( (realMatches[0].score === userMatches[0].score) && (realMatches[1].score === userMatches[1].score) ) points += SAME_SCORE; //Same score
        else if(correctWinOnSecondStage(realMatches, userMatches)) points += CORRECT_WINNER_OR_DRAW;
      }

      if(realMatches[0].country === userMatches[0].country){
        points += COUNTRY_IN_CORRECT_POSITION;
      }
      if(realMatches[1].country === userMatches[1].country){
        points += COUNTRY_IN_CORRECT_POSITION;
      }

      if( (abcCode === "ABCDEFGH" && phase === "final") && (correctWinOnSecondStage(realMatches, userMatches)) ) points += CORRECT_CHAMPION;

    })
  });

  return points;
}

